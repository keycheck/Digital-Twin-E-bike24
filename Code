/*
# Combined Voltage, Current, Temperature (MAX6675), MQ-7 Gas, and MPU6050 Sensors with ESP32 and ThingSpeak

This program reads voltage, current, temperature (MAX6675), CO gas (MQ-7), and MPU6050 accelerometer/gyroscope data using an ESP32-WROOM-32
and sends data to two ThingSpeak channels.

## Hardware Setup
- Voltage Sensor: Divider (R1=22kΩ, R2=33kΩ) on GPIO 34 (ADC1_CH6), across battery
- Current Sensor: ACS712 (5A) on GPIO 35 (ADC1_CH7), in series with battery positive and load
- Temperature Sensor (MAX6675): CS to GPIO 15, SO to GPIO 12, SCK to GPIO 14
- MQ-7 Gas Sensor: AOUT to GPIO 33 (ADC1_CH5), VCC to Arduino Uno 3.3V, GND to common ground
- MPU6050: SDA to GPIO 21, SCL to GPIO 22
- Power: Supplied from Arduino Uno R3 (3.3V)
- Ground: Common GND between ESP32, sensors, Uno, and battery

## Libraries Required
- WiFi.h (included with ESP32 board package)
- ThingSpeak.h (install via Library Manager)
- max6675.h (Adafruit MAX6675 library)
- Adafruit MPU6050 (with Adafruit Unified Sensor and Adafruit Bus IO)
*/

#include <WiFi.h>
#include <ThingSpeak.h>
#include <max6675.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

// Pin and Constants
const int voltagePin = 34; // GPIO 34 (ADC1_CH6) for battery voltage
const int currentPin = 35; // GPIO 35 (ADC1_CH7) for battery current (ACS712)
const int gasPin = 33; // GPIO 33 (ADC1_CH5) for MQ-7 gas sensor (CO)
const float voltageDividerRatio = 0.2; // R2/(R1+R2), R1=22k, R2=33k
const float voltageCalibration = 0.18; // Voltage calibration offset
const float referenceVoltage = 3.3; // ESP32 reference voltage
const float adcResolution = 4095.0; // ESP32 ADC is 12-bit
const float acs712Sensitivity = 0.185; // 185mV/A for 5A ACS712
const int numReadings = 10; // Number of readings to average

// MAX6675 Pins
int thermoDO = 12; // SO (MISO)
int thermoCS = 15; // CS
int thermoCLK = 14; // SCK
MAX6675 thermocouple(thermoCLK, thermoCS, thermoDO);

// MPU6050
Adafruit_MPU6050 mpu;

// ThingSpeak and WiFi Credentials (Channel 1)
const char* thingSpeakApiKey1 = "2VHTOPCCBSF8UOQ2"; // Write API Key for Channel 1
const long channelID1 = 2971980; // ThingSpeak Channel ID 1
WiFiClient client1;

// ThingSpeak Credentials (Channel 2)
const char* thingSpeakApiKey2 = "QM207OP758F4JIO6"; // Write API Key for Channel 2
const long channelID2 = 2979570; // ThingSpeak Channel ID 2
WiFiClient client2;

const char* ssid = "4422"; // WiFi SSID
const char* password = "rolex?red21"; // WiFi Password

/*
## Setup Function
Initializes Serial, ThingSpeak clients, WiFi, and sensors.
*/
void setup() {
  Serial.begin(115200);
  pinMode(voltagePin, INPUT);
  pinMode(currentPin, INPUT);
  pinMode(gasPin, INPUT);
  
  // Initialize MPU6050
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  Serial.println("MPU6050 Found!");
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);

  ThingSpeak.begin(client1); // Initialize for Channel 1
  ThingSpeak.begin(client2); // Initialize for Channel 2
  connectToWiFi();
  Serial.println("Setup completed.");
}

/*
## Loop Function
Reads all sensor data every 20 seconds and sends to two ThingSpeak channels.
*/
void loop() {
  WiFi.mode(WIFI_OFF); // Disable WiFi to reduce ADC noise
  float batteryVoltage = readVoltage();
  delay(5);
  float batteryCurrent = readCurrent();
  delay(5);
  float max6675Temperature = readMax6675Temperature();
  delay(5);
  float gasValue = readGasSensor();
  delay(5);
  float accelX, accelY, accelZ, gyroX, gyroY, gyroZ;
  readMPU6050Data(&accelX, &accelY, &accelZ, &gyroX, &gyroY, &gyroZ);
  WiFi.mode(WIFI_STA); // Re-enable WiFi
  connectToWiFi();
  sendDataToThingSpeak(batteryVoltage, batteryCurrent, max6675Temperature, gasValue, accelX, accelY, accelZ, gyroX, gyroY, gyroZ);
  delay(20000); // ThingSpeak free tier: min 15s between updates
}

/*
## Read Voltage Function
Returns: Battery voltage in volts (float)
*/
float readVoltage() {
  long totalValue = 0;
  for (int i = 0; i < numReadings; i++) {
    totalValue += analogRead(voltagePin);
    delay(10);
  }
  int sensorValue = totalValue / numReadings;
  Serial.print("Raw ADC Voltage: ");
  Serial.println(sensorValue);
  float voltageAtPin = (sensorValue * referenceVoltage) / adcResolution;
  Serial.print("Voltage at Pin: ");
  Serial.print(voltageAtPin, 2);
  Serial.println(" V");
  float batteryVoltage = (voltageAtPin / voltageDividerRatio) - voltageCalibration;
  Serial.print("Battery Voltage: ");
  Serial.print(batteryVoltage, 2);
  Serial.println(" V");
  return batteryVoltage;
}

/*
## Read Current Function
Returns: Battery current in mA (float)
*/
float readCurrent() {
  long totalValue = 0;
  for (int i = 0; i < numReadings; i++) {
    totalValue += analogRead(currentPin);
    delay(10);
  }
  int rawValue = totalValue / numReadings;
  float voltage = (rawValue * referenceVoltage) / adcResolution;
  float batteryCurrent = ((voltage - (referenceVoltage / 2)) / acs712Sensitivity) * 1000;
  Serial.print("Battery Current: ");
  Serial.print(batteryCurrent, 2);
  Serial.println(" mA");
  return batteryCurrent;
}

/*
## Read MAX6675 Temperature Function
Returns: Temperature in Celsius (float)
*/
float readMax6675Temperature() {
  float temperature = thermocouple.readCelsius();
  if (isnan(temperature)) {
    Serial.println("Failed to read MAX6675 temperature!");
    return 0.0;
  }
  Serial.print("MAX6675 Temperature: ");
  Serial.print(temperature, 2);
  Serial.println(" C");
  return temperature;
}

/*
## Read MQ-7 Gas Sensor Function
Returns: Voltage proportional to CO concentration (float, 0-3.3V)
*/
float readGasSensor() {
  long totalValue = 0;
  for (int i = 0; i < numReadings; i++) {
    totalValue += analogRead(gasPin);
    delay(10);
  }
  int rawValue = totalValue / numReadings;
  float gasVoltage = (rawValue * referenceVoltage) / adcResolution;
  Serial.print("MQ-7 CO Sensor Voltage: ");
  Serial.print(gasVoltage, 2);
  Serial.println(" V");
  return gasVoltage;
}

/*
## Read MPU6050 Data Function
Parameters: Pointers to store accel and gyro values.
*/
void readMPU6050Data(float* accelX, float* accelY, float* accelZ, float* gyroX, float* gyroY, float* gyroZ) {
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  // Accelerometer (m/s^2)
  *accelX = a.acceleration.x;
  *accelY = a.acceleration.y;
  *accelZ = a.acceleration.z;
  Serial.print("Acceleration X: ");
  Serial.print(*accelX, 2);
  Serial.print(" Y: ");
  Serial.print(*accelY, 2);
  Serial.print(" Z: ");
  Serial.print(*accelZ, 2);
  Serial.println(" m/s^2");

  // Gyroscope (rad/s)
  *gyroX = g.gyro.x;
  *gyroY = g.gyro.y;
  *gyroZ = g.gyro.z;
  Serial.print("Gyro X: ");
  Serial.print(*gyroX, 2);
  Serial.print(" Y: ");
  Serial.print(*gyroY, 2);
  Serial.print(" Z: ");
  Serial.print(*gyroZ, 2);
  Serial.println(" rad/s");
}

/*
## Connect to WiFi Function
*/
void connectToWiFi() {
  if (WiFi.status() != WL_CONNECTED) {
    WiFi.begin(ssid, password);
    Serial.print("Connecting to WiFi");
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20) {
      delay(500);
      Serial.print(".");
      attempts++;
    }
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\nConnected to WiFi");
    } else {
      Serial.println("\nFailed to connect to WiFi. Restarting...");
      ESP.restart();
    }
  }
}

/*
## Send Data to ThingSpeak Function
Sends voltage, current, MAX6675 temp, and MQ-7 gas to Channel 1, MPU6050 accel/gyro to Channel 2.
*/
void sendDataToThingSpeak(float batteryVoltage, float batteryCurrent, float max6675Temperature, float gasValue, float accelX, float accelY, float accelZ, float gyroX, float gyroY, float gyroZ) {
  // Send to Channel 1: Voltage, Current, MAX6675 Temperature, MQ-7 Gas
  ThingSpeak.setField(1, batteryVoltage);
  ThingSpeak.setField(2, batteryCurrent);
  ThingSpeak.setField(3, max6675Temperature);
  ThingSpeak.setField(4, gasValue);
  int status1 = ThingSpeak.writeFields(channelID1, thingSpeakApiKey1);
  if (status1 == 200) {
    Serial.println("Data sent to ThingSpeak Channel 1 successfully.");
  } else {
    Serial.println("Error sending to Channel 1: " + String(status1));
  }

  // Send to Channel 2: MPU6050 Accel X/Y/Z, Gyro X/Y/Z
  ThingSpeak.setField(1, accelX);
  ThingSpeak.setField(2, accelY);
  ThingSpeak.setField(3, accelZ);
  ThingSpeak.setField(4, gyroX);
  ThingSpeak.setField(5, gyroY);
  ThingSpeak.setField(6, gyroZ);
  int status2 = ThingSpeak.writeFields(channelID2, thingSpeakApiKey2);
  if (status2 == 200) {
    Serial.println("Data sent to ThingSpeak Channel 2 successfully.");
  } else {
    Serial.println("Error sending to Channel 2: " + String(status2));
  }
}
